library("MTS")
data = read.csv("D:\Files\NUS 2018 MFE\Paper\We R Best\data.csv",header=T)
#data = tail(data, 500)
log_price=log(data[,c(2,4)])
return=log_price[2:nrow(log_price),]-log_price[1:(nrow(log_price)-1),] ## Growth rate
return=return*100 ## Percentage growth rates
return_train = return[1:(nrow(return)-7) ,]
return_test = return[(nrow(return)-7):nrow(return) ,]
rm(data, log_price, return)
library("MTS")
data = read.csv("D:\Files\NUS 2018 MFE\Paper\We R Best\data.csv",header=T)
#data = tail(data, 500)
log_price=log(data[,c(2,4)])
return=log_price[2:nrow(log_price),]-log_price[1:(nrow(log_price)-1),] ## Growth rate
return=return*100 ## Percentage growth rates
return_train = return[1:(nrow(return)-7) ,]
return_test = return[(nrow(return)-7):nrow(return) ,]
rm(data, log_price, return)
install.packages("MTS")
library("MTS")
data = read.csv("D:\Files\NUS 2018 MFE\Paper\We R Best\data.csv",header=T)
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\data.csv",header=T)
log_price=log(data[,c(2,4)])
return=log_price[2:nrow(log_price),]-log_price[1:(nrow(log_price)-1),] ## Growth rate
return=return*100 ## Percentage growth rates
return_train = return[1:(nrow(return)-7) ,]
return_test = return[(nrow(return)-7):nrow(return) ,]
rm(data, log_price, return)
#### Data Preprocessing ####
library("MTS")
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\leanhogs.csv",header=T)
#data = tail(data, 500)
log_price=data[,c(1,2,4)]
log_price=data[,c(1,2,3)]
log_price=data[,c(1,3)]
log_price=log(data[,c(1,4)])
data
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\leanhogs.csv",header=T)
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\leanhogs.csv",header=T)
data
data[,c(1,4)
]
data[,c(2,5)]
data[,c(2,4)]
data[,c(2,3,4)]
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\data.csv",header=T)
#data = tail(data, 500)
log_price=log(data[,c(2,4)])
log_price
return=log_price[2:nrow(log_price),]-log_price[1:(nrow(log_price)-1),] ## Growth rate
return=return*100 ## Percentage growth rates
return_train = return[1:(nrow(return)-7) ,]
return_test = return[(nrow(return)-7):nrow(return) ,]
rm(data, log_price, return)
dim(return_train)
par(mfrow=c(4,1))
MTSplot(return_train)
return_train
#### Data Preprocessing ####
library("MTS")
data = read.csv("D:\\Files\\NUS 2018 MFE\\Paper\\We R Best\\leanhogs.csv",header=T)
#data = tail(data, 500)
return = data[,c(2,3,4)] * 100
return_train = return[1:(nrow(return)-7) ,]
return_test = return[(nrow(return)-7):nrow(return) ,]
rm(data, return)
library(tseries)
data = return_train[, 1]
par(mfrow=c(2,3))
plot(data, pch = 20)
acf(data)
pacf(data)
adf.test(data)
library(forecast)
ARMA = auto.arima( data,max.p=20,max.q=20,ic="aic")
print(ARMA)
plot(residuals(ARMA))
acf(residuals(ARMA) )
acf(residuals(ARMA)^2)
forecasts = predict(ARMA, 8)
## forecast sp500
library(tseries)
data = return_train[, 2]
par(mfrow=c(2,3))
plot(data, pch = 20)
adf.test(data)
acf(data)
pacf(data)
library(forecast)
ARMA = auto.arima( data,max.p=20,max.q=20,ic="aic")
print(ARMA)
plot(residuals(ARMA))
acf(residuals(ARMA) )
acf(residuals(ARMA)^2 )
forecasts = predict(ARMA, 8)
library(tseries)
data = return_train[, 3]
par(mfrow=c(2,3))
plot(data, pch = 20)
adf.test(data)
acf(data)
pacf(data)
library(forecast)
ARMA = auto.arima( data,max.p=20,max.q=20,ic="aic")
print(ARMA)
plot(residuals(ARMA))
acf(residuals(ARMA) )
acf(residuals(ARMA)^2 )
forecasts = predict(ARMA, 8)
data = return_train[, 1]
library(tseries)
par(mfrow=c(2,3))
plot(data, pch = 20)
adf.test(data)
acf(data)
pacf(data)
library(forecast)
ARMA = auto.arima( data,max.p=20,max.q=20,ic="aic")
print(ARMA)
acf(residuals(ARMA) )
acf(residuals(ARMA)^2 )
library(fGarch)
garch = garchFit(formula= ~arma(0,0) + garch(1,1), data)
res = residuals(garch)
res_std = res / garch@sigma.t
par(mfrow=c(2,3))
plot(res)
acf(res)
acf(res^2)
plot(res_std)
acf(res_std)
acf(res_std^2)
options(digits=4)
summary(garch)
forecasts = predict(garch, 8)
dim(return_train)
par(mfrow=c(4,1))
MTSplot(return_train)
ccm(return_train)
names(m0)
m0$Mstat
m0=VARorder(return_train)
names(m0)
m0$Mstat
m1=VAR(return_train,0)
m2=refVAR(m1,thres=1.96)
pred_mean = VARpred(m2,8)$pred
pred_std = VARpred(m2,8)[[2]]
pred_upper = pred_mean + 1.96*pred_std
pred_lower = pred_mean - 1.96*pred_std
# plot oil test performance
data = return_test[1]
oil_test = cbind( return_test[, 1], pred_mean[, 1],pred_upper[, 1],  pred_lower[, 1])
oil_test = data.frame(oil_test)
oil_test = cbind(data[(nrow(data)-7):nrow(data), 1], oil_test)
names(oil_test) = c('Date','return','prediction','upper','lower')
library("ggplot2")
ggplot(oil_test, aes(Date, return,group = 1)) +
geom_point() +
geom_line(aes(y = prediction), color = "red", linetype = "dashed")+
geom_line(aes(y = lower), color = "red", linetype = "dashed")+
geom_line(aes(y = upper), color = "red", linetype = "dashed")+
theme_minimal()
RMSE = sqrt( mean( (oil_test[,2] - oil_test[,3])^2) )
RMSE
#### VAR Model ####
dim(return_train)
par(mfrow=c(4,1))
MTSplot(return_train)
ccm(return_train)
